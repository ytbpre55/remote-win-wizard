
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Monitor, Download, Settings, CheckCircle, Phone } from "lucide-react";
import { Button } from "@/components/ui/button";

const Process = () => {
  const processSteps = [
    {
      step: 1,
      icon: Monitor,
      title: "K·∫øt n·ªëi t·ª´ xa",
      description: "S·ª≠ d·ª•ng ph·∫ßn m·ªÅm UltraView ho·∫∑c TeamViewer ƒë·ªÉ k·∫øt n·ªëi v·ªõi m√°y t√≠nh c·ªßa b·∫°n",
      details: "Ch√∫ng t√¥i s·∫Ω h∆∞·ªõng d·∫´n b·∫°n t·∫£i v√† c√†i ƒë·∫∑t ph·∫ßn m·ªÅm k·∫øt n·ªëi t·ª´ xa"
    },
    {
      step: 2,
      icon: Settings,
      title: "Ki·ªÉm tra v√† chu·∫©n b·ªã",
      description: "Ti·∫øn h√†nh ki·ªÉm tra l·ªói (n·∫øu c√≥) v√† chu·∫©n b·ªã cho qu√° tr√¨nh c√†i ƒë·∫∑t",
      details: "Backup d·ªØ li·ªáu quan tr·ªçng v√† ki·ªÉm tra t∆∞∆°ng th√≠ch ph·∫ßn c·ª©ng"
    },
    {
      step: 3,
      icon: Download,
      title: "C√†i ƒë·∫∑t h·ªá ƒëi·ªÅu h√†nh",
      description: "Ti·∫øn h√†nh c√†i ƒë·∫∑t v√† n√¢ng c·∫•p Windows theo y√™u c·∫ßu c·ªßa b·∫°n",
      details: "C√†i ƒë·∫∑t Windows, driver v√† c√°c ph·∫ßn m·ªÅm c·∫ßn thi·∫øt"
    },
    {
      step: 4,
      icon: CheckCircle,
      title: "Ho√†n th√†nh v√† b√†n giao",
      description: "Ki·ªÉm tra ho·∫°t ƒë·ªông v√† b√†n giao h·ªá th·ªëng ho√†n ch·ªânh",
      details: "H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng v√† h·ªó tr·ª£ k·ªπ thu·∫≠t sau c√†i ƒë·∫∑t"
    }
  ];

  const scenarios = [
    {
      title: "Tr∆∞·ªùng h·ª£p 1: M√°y t√≠nh v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng",
      description: "Ch√∫ng t√¥i c√≥ th·ªÉ tr·ª±c ti·∫øp k·∫øt n·ªëi v√† th·ª±c hi·ªán c√†i ƒë·∫∑t ngay l·∫≠p t·ª©c",
      requirements: ["K·∫øt n·ªëi internet ·ªïn ƒë·ªãnh", "C√†i ƒë·∫∑t ph·∫ßn m·ªÅm k·∫øt n·ªëi t·ª´ xa"]
    },
    {
      title: "Tr∆∞·ªùng h·ª£p 2: M√°y t√≠nh g·∫∑p s·ª± c·ªë, kh√¥ng v√†o ƒë∆∞·ª£c Windows",
      description: "C·∫ßn chu·∫©n b·ªã th√™m m·ªôt s·ªë c√¥ng c·ª• ƒë·ªÉ h·ªó tr·ª£ qu√° tr√¨nh c√†i ƒë·∫∑t",
      requirements: [
        "USB c√≥ dung l∆∞·ª£ng t·ªëi thi·ªÉu 2-8GB",
        "M√°y t√≠nh kh√°c c√≥ k·∫øt n·ªëi m·∫°ng",
        "Ph·∫ßn m·ªÅm UltraView ho·∫∑c TeamViewer tr√™n m√°y ph·ª•"
      ]
    }
  ];

  return (
    <section id="process" className="py-20 bg-gray-50">
      <div className="container mx-auto px-4">
        <div className="text-center mb-16">
          <h2 className="text-3xl lg:text-4xl font-bold text-gray-800 mb-4">
            Quy Tr√¨nh Th·ª±c Hi·ªán C√†i Win T·ª´ Xa
          </h2>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Quy tr√¨nh c√†i ƒë·∫∑t Windows t·ª´ xa qua m·∫°ng internet nhanh ch√≥ng t·∫°i CaiWinOnline.com
          </p>
        </div>

        {/* Process Steps */}
        <div className="grid md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
          {processSteps.map((step, index) => (
            <Card key={index} className="text-center hover:shadow-lg transition-all duration-300 relative">
              <CardHeader>
                <div className="mx-auto bg-blue-600 text-white rounded-full w-12 h-12 flex items-center justify-center mb-4 font-bold text-xl">
                  {step.step}
                </div>
                <div className="mx-auto bg-blue-100 rounded-full w-16 h-16 flex items-center justify-center mb-4">
                  <step.icon className="text-blue-600 w-8 h-8" />
                </div>
                <CardTitle className="text-lg font-semibold text-gray-800">
                  {step.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 mb-3">{step.description}</p>
                <p className="text-sm text-gray-500">{step.details}</p>
              </CardContent>
              
              {/* Connection line */}
              {index < processSteps.length - 1 && (
                <div className="hidden lg:block absolute top-20 -right-4 w-8 h-0.5 bg-blue-300"></div>
              )}
            </Card>
          ))}
        </div>

        {/* Scenarios */}
        <div className="grid lg:grid-cols-2 gap-8 mb-16">
          {scenarios.map((scenario, index) => (
            <Card key={index} className="hover:shadow-lg transition-shadow duration-300">
              <CardHeader>
                <div className="flex items-center space-x-3 mb-2">
                  <div className="bg-blue-600 text-white rounded-full w-8 h-8 flex items-center justify-center text-sm font-bold">
                    {index + 1}
                  </div>
                  <CardTitle className="text-xl font-bold text-gray-800">
                    {scenario.title}
                  </CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 mb-4">{scenario.description}</p>
                <div className="space-y-2">
                  <p className="font-semibold text-gray-800">Y√™u c·∫ßu c·∫ßn thi·∫øt:</p>
                  <ul className="space-y-1">
                    {scenario.requirements.map((req, reqIndex) => (
                      <li key={reqIndex} className="flex items-center space-x-2">
                        <CheckCircle className="text-green-500 w-4 h-4 flex-shrink-0" />
                        <span className="text-gray-700 text-sm">{req}</span>
                      </li>
                    ))}
                  </ul>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>

        {/* Call to Action */}
        <div className="text-center">
          <div className="bg-blue-600 text-white rounded-2xl p-8 max-w-2xl mx-auto">
            <h3 className="text-2xl font-bold mb-4">üöÄ ƒê·∫∑t D·ªãch V·ª• Nhanh</h3>
            <p className="text-blue-100 mb-6">
              G·ªçi ngay ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† ƒë·∫∑t l·ªãch c√†i ƒë·∫∑t trong ng√†y
            </p>
            <div className="space-y-4">
              <p className="text-xl font-bold">üìû S·ªë ƒëi·ªán tho·∫°i/Zalo: 0356243926</p>
              <div className="flex flex-col sm:flex-row gap-3 justify-center">
                <Button 
                  className="bg-white text-blue-600 hover:bg-gray-100 font-semibold"
                  onClick={() => window.open('tel:0356243926')}
                >
                  <Phone className="w-4 h-4 mr-2" />
                  G·ªçi ngay
                </Button>
                <Button 
                  className="bg-green-500 text-white hover:bg-green-600 font-semibold"
                  onClick={() => window.open('https://zalo.me/0356243926')}
                >
                  Chat Zalo
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
};

export default Process;
